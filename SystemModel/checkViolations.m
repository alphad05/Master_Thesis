tolerance = 0.01;
multiplier = 1000.0;
%get the injected power into the branch
fprintf('Branch Violations \nFrom  To  Status  Power   Limit \n');
maxLineInjection = max(abs(results.branch(:,PF)), abs(results.branch(:,PT)));
%find which branches violates limits, using rate b as the limit. 
branchLimViolationIndices = find(abs(round(maxLineInjection(:,1)*multiplier)/multiplier) > (results.branch(:,RATE_B)+tolerance) & results.branch(:,RATE_B) > 0);
for k=1:length(branchLimViolationIndices)
    %from to status power limit
    fprintf('%d   %d    %d  %10.3f  %10.3f \n',...
        results.branch(branchLimViolationIndices(k),F_BUS), ...
        results.branch(branchLimViolationIndices(k),T_BUS), ...
        results.branch(branchLimViolationIndices(k),BR_STATUS), ...
        results.branch(branchLimViolationIndices(k),PF), ...
        results.branch(branchLimViolationIndices(k),RATE_B) ...
    );
    %branchItems = {results.branch(branchLimViolationIndices(k),F_BUS), results.branch(branchLimViolationIndices(k),T_BUS), results.branch(branchLimViolationIndices(k),BR_STATUS), results.branch(branchLimViolationIndices(k),PF), results.branch(branchLimViolationIndices(k),RATE_B)}
end

%find voltage violations on bus
fprintf('Bus voltage violations \nBus   Voltage     VMAX    VMIN \n');
voltViolationIndices = find(round(results.bus(:,VM)*multiplier)/multiplier > (results.bus(:,VMAX)+tolerance) | round(results.bus(:,VM)*1000.0)/1000.0 < (results.bus(:,VMIN)-tolerance));
for k=1:length(voltViolationIndices)
   %bus voltage vmax vmin
   fprintf('%d  %10.5f  %10.3f  %10.3f \n',...
       results.bus(voltViolationIndices(k),BUS_I), ...
       results.bus(voltViolationIndices(k),VM), ...
       results.bus(voltViolationIndices(k),VMAX), ...
       results.bus(voltViolationIndices(k),VMIN) ...
   );
   %voltItems = {results.bus(voltViolationIndices(k),BUS_I), results.bus(voltViolationIndices(k),VM), results.bus(voltViolationIndices(k),VMAX), results.bus(voltViolationIndices(k),VMIN)} 
end

%ignoring generator violations for now
% %find generator real power violations
% fprintf('Generator real violations \nGen_bus    Real_Power  Real_Power_Max  Real_Power_Min \n');
% genRealPowViolationsIndices = find((abs(results.gen(:,PG)) > results.gen(:,PMAX)+tolerance | abs(results.gen(:,PG)) < results.gen(:,PMIN)-tolerance) & results.gen(:,GEN_STATUS) > 0);
% for k = 1:length(genRealPowViolationsIndices)
%     %results.gen(genRealPowViolationsIndices, PMIN) - results.gen(Pv.i,PG)
%     %gen_bus gen_real_power gen_real_power_max gen_real_power_min
%     fprintf('%d     %10.3f  %10.3f  %10.3f \n',...
%         results.gen(genRealPowViolationsIndices(k),GEN_BUS), ...
%         results.gen(genRealPowViolationsIndices(k),PG), ...
%         results.gen(genRealPowViolationsIndices(k),PMAX), ...
%         results.gen(genRealPowViolationsIndices(k),PMIN) ...
%     );
% end
% 
% %find generator reactive power violations
% fprintf('Generator reactive violations \nGen_bus    React_Power  React_Power_Max  React_Power_Min \n');
% genReactPowViolationsIndices = find((results.gen(:,QG) > results.gen(:,QMAX)+tolerance | results.gen(:,QG) < results.gen(:,QMIN)-tolerance) & results.gen(:,GEN_STATUS) > 0);
% for k = 1:length(genReactPowViolationsIndices)
%     %results.gen(genRealPowViolationsIndices, PMIN) - results.gen(Pv.i,PG)
%     %gen_bus gen_react_power gen_react_power_max gen_react_power_min
%     fprintf('%d     %10.3f  %10.3f  %10.3f \n',...
%         results.gen(genReactPowViolationsIndices(k),GEN_BUS), ...
%         results.gen(genReactPowViolationsIndices(k),QG), ...
%         results.gen(genReactPowViolationsIndices(k),QMAX), ...
%         results.gen(genReactPowViolationsIndices(k),QMIN) ...
%     );
% end


numViolations = length(branchLimViolationIndices) + length(voltViolationIndices) %+ length(genRealPowViolationsIndices) + length(genReactPowViolationsIndices)
    
